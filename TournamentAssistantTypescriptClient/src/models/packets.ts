// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "packets.proto" (package "proto.packet", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CoreServer } from "./models";
import { QualifierEvent } from "./models";
import { Match } from "./models";
import { PreviewBeatmapLevel } from "./models";
import { State } from "./models";
import { Beatmap } from "./models";
import { User } from "./models";
import { RealtimeScore } from "./models";
import { LeaderboardScore } from "./models";
import { ModalOption } from "./models";
import { Channel } from "./discord";
import { GameplayParameters } from "./models";
/**
 * ---- Commands (DO something!) ---- //
 *
 * @generated from protobuf message proto.packet.Command
 */
export interface Command {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "heartbeat";
        /**
         * @generated from protobuf field: bool heartbeat = 1;
         */
        heartbeat: boolean; // Is this really a command?
    } | {
        oneofKind: "returnToMenu";
        /**
         * @generated from protobuf field: bool return_to_menu = 2;
         */
        returnToMenu: boolean;
    } | {
        oneofKind: "delayTestFinish";
        /**
         * @generated from protobuf field: bool delay_test_finish = 3;
         */
        delayTestFinish: boolean;
    } | {
        oneofKind: "streamSyncShowImage";
        /**
         * @generated from protobuf field: bool stream_sync_show_image = 4;
         */
        streamSyncShowImage: boolean;
    } | {
        oneofKind: "loadSong";
        /**
         * @generated from protobuf field: proto.packet.Command.LoadSong load_song = 5;
         */
        loadSong: Command_LoadSong;
    } | {
        oneofKind: "playSong";
        /**
         * @generated from protobuf field: proto.packet.Command.PlaySong play_song = 6;
         */
        playSong: Command_PlaySong;
    } | {
        oneofKind: "sendBotMessage";
        /**
         * @generated from protobuf field: proto.packet.Command.SendBotMessage send_bot_message = 7;
         */
        sendBotMessage: Command_SendBotMessage;
    } | {
        oneofKind: "showModal";
        /**
         * @generated from protobuf field: proto.packet.Command.ShowModal show_modal = 8;
         */
        showModal: Command_ShowModal;
    } | {
        oneofKind: "discordAuthorize";
        /**
         * @generated from protobuf field: string discord_authorize = 9;
         */
        discordAuthorize: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message proto.packet.Command.LoadSong
 */
export interface Command_LoadSong {
    /**
     * @generated from protobuf field: string level_id = 1;
     */
    levelId: string;
    /**
     * @generated from protobuf field: string custom_host_url = 2;
     */
    customHostUrl: string;
}
/**
 * @generated from protobuf message proto.packet.Command.PlaySong
 */
export interface Command_PlaySong {
    /**
     * @generated from protobuf field: proto.models.GameplayParameters gameplay_parameters = 1;
     */
    gameplayParameters?: GameplayParameters;
    /**
     * @generated from protobuf field: bool floating_scoreboard = 3;
     */
    floatingScoreboard: boolean;
    /**
     * @generated from protobuf field: bool stream_sync = 4;
     */
    streamSync: boolean;
    /**
     * @generated from protobuf field: bool disable_fail = 5;
     */
    disableFail: boolean;
    /**
     * @generated from protobuf field: bool disable_pause = 6;
     */
    disablePause: boolean;
    /**
     * @generated from protobuf field: bool disable_scoresaber_submission = 7;
     */
    disableScoresaberSubmission: boolean;
    /**
     * @generated from protobuf field: bool show_normal_notes_on_stream = 8;
     */
    showNormalNotesOnStream: boolean;
}
/**
 * @generated from protobuf message proto.packet.Command.SendBotMessage
 */
export interface Command_SendBotMessage {
    /**
     * @generated from protobuf field: proto.discord.Channel channel = 1;
     */
    channel?: Channel;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
}
/**
 * @generated from protobuf message proto.packet.Command.ShowModal
 */
export interface Command_ShowModal {
    /**
     * @generated from protobuf field: string modal_id = 1;
     */
    modalId: string;
    /**
     * @generated from protobuf field: string message_title = 2;
     */
    messageTitle: string;
    /**
     * @generated from protobuf field: string message_text = 3;
     */
    messageText: string;
    /**
     * @generated from protobuf field: bool can_close = 4;
     */
    canClose: boolean;
    /**
     * @generated from protobuf field: proto.models.ModalOption option_1 = 5;
     */
    option1?: ModalOption;
    /**
     * @generated from protobuf field: proto.models.ModalOption option_2 = 6;
     */
    option2?: ModalOption;
}
/**
 * ---- Pushes (SUBMIT something!) ---- //
 *
 * @generated from protobuf message proto.packet.Push
 */
export interface Push {
    /**
     * @generated from protobuf oneof: data
     */
    data: {
        oneofKind: "leaderboardScore";
        /**
         * @generated from protobuf field: proto.models.LeaderboardScore leaderboard_score = 1;
         */
        leaderboardScore: LeaderboardScore;
    } | {
        oneofKind: "realtimeScore";
        /**
         * @generated from protobuf field: proto.models.RealtimeScore realtime_score = 2;
         */
        realtimeScore: RealtimeScore;
    } | {
        oneofKind: "songFinished";
        /**
         * @generated from protobuf field: proto.packet.Push.SongFinished song_finished = 3;
         */
        songFinished: Push_SongFinished;
    } | {
        oneofKind: "discordAuthorized";
        /**
         * @generated from protobuf field: proto.packet.Push.DiscordAuthorized discord_authorized = 4;
         */
        discordAuthorized: Push_DiscordAuthorized;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message proto.packet.Push.SongFinished
 */
export interface Push_SongFinished {
    /**
     * @generated from protobuf field: proto.models.User player = 1;
     */
    player?: User;
    /**
     * @generated from protobuf field: proto.models.Beatmap beatmap = 2;
     */
    beatmap?: Beatmap;
    /**
     * @generated from protobuf field: proto.packet.Push.SongFinished.CompletionType type = 3;
     */
    type: Push_SongFinished_CompletionType;
    /**
     * @generated from protobuf field: int32 score = 4;
     */
    score: number;
}
/**
 * @generated from protobuf enum proto.packet.Push.SongFinished.CompletionType
 */
export enum Push_SongFinished_CompletionType {
    /**
     * @generated from protobuf enum value: Passed = 0;
     */
    Passed = 0,
    /**
     * @generated from protobuf enum value: Failed = 1;
     */
    Failed = 1,
    /**
     * @generated from protobuf enum value: Quit = 2;
     */
    Quit = 2
}
/**
 * @generated from protobuf message proto.packet.Push.DiscordAuthorized
 */
export interface Push_DiscordAuthorized {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
}
/**
 * ---- Requests (GET (or do?) something where you need a response!) ---- //
 *
 * @generated from protobuf message proto.packet.Request
 */
export interface Request {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "connect";
        /**
         * @generated from protobuf field: proto.packet.Request.Connect connect = 1;
         */
        connect: Request_Connect;
    } | {
        oneofKind: "leaderboardScore";
        /**
         * @generated from protobuf field: proto.packet.Request.LeaderboardScore leaderboard_score = 2;
         */
        leaderboardScore: Request_LeaderboardScore;
    } | {
        oneofKind: "preloadImageForStreamSync";
        /**
         * @generated from protobuf field: proto.packet.Request.PreloadImageForStreamSync preload_image_for_stream_sync = 3;
         */
        preloadImageForStreamSync: Request_PreloadImageForStreamSync;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message proto.packet.Request.Connect
 */
export interface Request_Connect {
    /**
     * @generated from protobuf field: proto.models.User user = 1;
     */
    user?: User;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
    /**
     * @generated from protobuf field: int32 client_version = 3;
     */
    clientVersion: number;
}
/**
 * @generated from protobuf message proto.packet.Request.LeaderboardScore
 */
export interface Request_LeaderboardScore {
    /**
     * @generated from protobuf field: string event_id = 1;
     */
    eventId: string;
    /**
     * @generated from protobuf field: proto.models.GameplayParameters parameters = 2;
     */
    parameters?: GameplayParameters;
}
/**
 * @generated from protobuf message proto.packet.Request.PreloadImageForStreamSync
 */
export interface Request_PreloadImageForStreamSync {
    /**
     * @generated from protobuf field: string file_id = 1;
     */
    fileId: string;
    /**
     * @generated from protobuf field: bool compressed = 2;
     */
    compressed: boolean;
    /**
     * @generated from protobuf field: bytes data = 3;
     */
    data: Uint8Array;
}
/**
 * ---- Responses ---- //
 *
 * @generated from protobuf message proto.packet.Response
 */
export interface Response {
    /**
     * @generated from protobuf field: proto.packet.Response.ResponseType type = 1;
     */
    type: Response_ResponseType;
    /**
     * @generated from protobuf field: string responding_to_packet_id = 2;
     */
    respondingToPacketId: string;
    /**
     * @generated from protobuf oneof: details
     */
    details: {
        oneofKind: "connect";
        /**
         * @generated from protobuf field: proto.packet.Response.Connect connect = 3;
         */
        connect: Response_Connect;
    } | {
        oneofKind: "leaderboardScores";
        /**
         * @generated from protobuf field: proto.packet.Response.LeaderboardScores leaderboard_scores = 4;
         */
        leaderboardScores: Response_LeaderboardScores;
    } | {
        oneofKind: "loadedSong";
        /**
         * @generated from protobuf field: proto.packet.Response.LoadedSong loaded_song = 5;
         */
        loadedSong: Response_LoadedSong;
    } | {
        oneofKind: "modal";
        /**
         * @generated from protobuf field: proto.packet.Response.Modal modal = 6;
         */
        modal: Response_Modal;
    } | {
        oneofKind: "modifyQualifier";
        /**
         * @generated from protobuf field: proto.packet.Response.ModifyQualifier modify_qualifier = 7;
         */
        modifyQualifier: Response_ModifyQualifier;
    } | {
        oneofKind: "imagePreloaded";
        /**
         * @generated from protobuf field: proto.packet.Response.ImagePreloaded image_preloaded = 8;
         */
        imagePreloaded: Response_ImagePreloaded;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message proto.packet.Response.Connect
 */
export interface Response_Connect {
    /**
     * @generated from protobuf field: proto.models.State state = 1;
     */
    state?: State;
    /**
     * @generated from protobuf field: string self_guid = 2;
     */
    selfGuid: string;
    /**
     * @generated from protobuf field: int32 server_version = 3;
     */
    serverVersion: number;
    /**
     * @generated from protobuf field: string message = 4;
     */
    message: string;
    /**
     * @generated from protobuf field: proto.packet.Response.ConnectFailReason reason = 5;
     */
    reason: Response_ConnectFailReason;
}
/**
 * @generated from protobuf message proto.packet.Response.LeaderboardScores
 */
export interface Response_LeaderboardScores {
    /**
     * @generated from protobuf field: repeated proto.models.LeaderboardScore scores = 1;
     */
    scores: LeaderboardScore[];
}
/**
 * @generated from protobuf message proto.packet.Response.LoadedSong
 */
export interface Response_LoadedSong {
    /**
     * @generated from protobuf field: proto.models.PreviewBeatmapLevel level = 1;
     */
    level?: PreviewBeatmapLevel;
}
/**
 * @generated from protobuf message proto.packet.Response.Modal
 */
export interface Response_Modal {
    /**
     * @generated from protobuf field: string modal_id = 1;
     */
    modalId: string;
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string;
}
/**
 * @generated from protobuf message proto.packet.Response.ModifyQualifier
 */
export interface Response_ModifyQualifier {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
}
/**
 * @generated from protobuf message proto.packet.Response.ImagePreloaded
 */
export interface Response_ImagePreloaded {
    /**
     * @generated from protobuf field: string file_id = 1;
     */
    fileId: string;
}
/**
 * @generated from protobuf enum proto.packet.Response.ResponseType
 */
export enum Response_ResponseType {
    /**
     * @generated from protobuf enum value: Fail = 0;
     */
    Fail = 0,
    /**
     * @generated from protobuf enum value: Success = 1;
     */
    Success = 1
}
/**
 * @generated from protobuf enum proto.packet.Response.ConnectFailReason
 */
export enum Response_ConnectFailReason {
    /**
     * @generated from protobuf enum value: IncorrectVersion = 0;
     */
    IncorrectVersion = 0,
    /**
     * @generated from protobuf enum value: IncorrectPassword = 1;
     */
    IncorrectPassword = 1
}
/**
 * ---- Backbone ---- //
 *
 * @generated from protobuf message proto.packet.Acknowledgement
 */
export interface Acknowledgement {
    /**
     * @generated from protobuf field: string packet_id = 1;
     */
    packetId: string;
    /**
     * @generated from protobuf field: proto.packet.Acknowledgement.AcknowledgementType type = 2;
     */
    type: Acknowledgement_AcknowledgementType;
}
/**
 * @generated from protobuf enum proto.packet.Acknowledgement.AcknowledgementType
 */
export enum Acknowledgement_AcknowledgementType {
    /**
     * @generated from protobuf enum value: MessageReceived = 0;
     */
    MessageReceived = 0
}
/**
 * @generated from protobuf message proto.packet.ForwardingPacket
 */
export interface ForwardingPacket {
    /**
     * @generated from protobuf field: repeated string forward_to = 1;
     */
    forwardTo: string[];
    /**
     * @generated from protobuf field: proto.packet.Packet packet = 2;
     */
    packet?: Packet;
}
/**
 * @generated from protobuf message proto.packet.Event
 */
export interface Event {
    /**
     * @generated from protobuf oneof: changed_object
     */
    changedObject: {
        oneofKind: "userAddedEvent";
        /**
         * @generated from protobuf field: proto.packet.Event.UserAddedEvent user_added_event = 1;
         */
        userAddedEvent: Event_UserAddedEvent;
    } | {
        oneofKind: "userUpdatedEvent";
        /**
         * @generated from protobuf field: proto.packet.Event.UserUpdatedEvent user_updated_event = 2;
         */
        userUpdatedEvent: Event_UserUpdatedEvent;
    } | {
        oneofKind: "userLeftEvent";
        /**
         * @generated from protobuf field: proto.packet.Event.UserLeftEvent user_left_event = 3;
         */
        userLeftEvent: Event_UserLeftEvent;
    } | {
        oneofKind: "matchCreatedEvent";
        /**
         * @generated from protobuf field: proto.packet.Event.MatchCreatedEvent match_created_event = 6;
         */
        matchCreatedEvent: Event_MatchCreatedEvent;
    } | {
        oneofKind: "matchUpdatedEvent";
        /**
         * @generated from protobuf field: proto.packet.Event.MatchUpdatedEvent match_updated_event = 7;
         */
        matchUpdatedEvent: Event_MatchUpdatedEvent;
    } | {
        oneofKind: "matchDeletedEvent";
        /**
         * @generated from protobuf field: proto.packet.Event.MatchDeletedEvent match_deleted_event = 8;
         */
        matchDeletedEvent: Event_MatchDeletedEvent;
    } | {
        oneofKind: "qualifierCreatedEvent";
        /**
         * @generated from protobuf field: proto.packet.Event.QualifierCreatedEvent qualifier_created_event = 9;
         */
        qualifierCreatedEvent: Event_QualifierCreatedEvent;
    } | {
        oneofKind: "qualifierUpdatedEvent";
        /**
         * @generated from protobuf field: proto.packet.Event.QualifierUpdatedEvent qualifier_updated_event = 10;
         */
        qualifierUpdatedEvent: Event_QualifierUpdatedEvent;
    } | {
        oneofKind: "qualifierDeletedEvent";
        /**
         * @generated from protobuf field: proto.packet.Event.QualifierDeletedEvent qualifier_deleted_event = 11;
         */
        qualifierDeletedEvent: Event_QualifierDeletedEvent;
    } | {
        oneofKind: "serverAddedEvent";
        /**
         * @generated from protobuf field: proto.packet.Event.ServerAddedEvent server_added_event = 12;
         */
        serverAddedEvent: Event_ServerAddedEvent;
    } | {
        oneofKind: "serverDeletedEvent";
        /**
         * @generated from protobuf field: proto.packet.Event.ServerDeletedEvent server_deleted_event = 13;
         */
        serverDeletedEvent: Event_ServerDeletedEvent;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message proto.packet.Event.UserAddedEvent
 */
export interface Event_UserAddedEvent {
    /**
     * @generated from protobuf field: proto.models.User user = 1;
     */
    user?: User;
}
/**
 * @generated from protobuf message proto.packet.Event.UserUpdatedEvent
 */
export interface Event_UserUpdatedEvent {
    /**
     * @generated from protobuf field: proto.models.User user = 1;
     */
    user?: User;
}
/**
 * @generated from protobuf message proto.packet.Event.UserLeftEvent
 */
export interface Event_UserLeftEvent {
    /**
     * @generated from protobuf field: proto.models.User user = 1;
     */
    user?: User;
}
/**
 * @generated from protobuf message proto.packet.Event.MatchCreatedEvent
 */
export interface Event_MatchCreatedEvent {
    /**
     * @generated from protobuf field: proto.models.Match match = 1;
     */
    match?: Match;
}
/**
 * @generated from protobuf message proto.packet.Event.MatchUpdatedEvent
 */
export interface Event_MatchUpdatedEvent {
    /**
     * @generated from protobuf field: proto.models.Match match = 1;
     */
    match?: Match;
}
/**
 * @generated from protobuf message proto.packet.Event.MatchDeletedEvent
 */
export interface Event_MatchDeletedEvent {
    /**
     * @generated from protobuf field: proto.models.Match match = 1;
     */
    match?: Match;
}
/**
 * @generated from protobuf message proto.packet.Event.QualifierCreatedEvent
 */
export interface Event_QualifierCreatedEvent {
    /**
     * @generated from protobuf field: proto.models.QualifierEvent event = 1;
     */
    event?: QualifierEvent;
}
/**
 * @generated from protobuf message proto.packet.Event.QualifierUpdatedEvent
 */
export interface Event_QualifierUpdatedEvent {
    /**
     * @generated from protobuf field: proto.models.QualifierEvent event = 1;
     */
    event?: QualifierEvent;
}
/**
 * @generated from protobuf message proto.packet.Event.QualifierDeletedEvent
 */
export interface Event_QualifierDeletedEvent {
    /**
     * @generated from protobuf field: proto.models.QualifierEvent event = 1;
     */
    event?: QualifierEvent;
}
/**
 * @generated from protobuf message proto.packet.Event.ServerAddedEvent
 */
export interface Event_ServerAddedEvent {
    /**
     * @generated from protobuf field: proto.models.CoreServer server = 1;
     */
    server?: CoreServer;
}
/**
 * @generated from protobuf message proto.packet.Event.ServerDeletedEvent
 */
export interface Event_ServerDeletedEvent {
    /**
     * @generated from protobuf field: proto.models.CoreServer server = 1;
     */
    server?: CoreServer;
}
/**
 * @generated from protobuf message proto.packet.Packet
 */
export interface Packet {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string from = 2;
     */
    from: string;
    /**
     * @generated from protobuf oneof: packet
     */
    packet: {
        oneofKind: "acknowledgement";
        /**
         * @generated from protobuf field: proto.packet.Acknowledgement acknowledgement = 3;
         */
        acknowledgement: Acknowledgement;
    } | {
        oneofKind: "forwardingPacket";
        /**
         * @generated from protobuf field: proto.packet.ForwardingPacket forwarding_packet = 4;
         */
        forwardingPacket: ForwardingPacket;
    } | {
        oneofKind: "command";
        /**
         * @generated from protobuf field: proto.packet.Command command = 5;
         */
        command: Command;
    } | {
        oneofKind: "push";
        /**
         * @generated from protobuf field: proto.packet.Push push = 6;
         */
        push: Push;
    } | {
        oneofKind: "request";
        /**
         * @generated from protobuf field: proto.packet.Request request = 7;
         */
        request: Request;
    } | {
        oneofKind: "response";
        /**
         * @generated from protobuf field: proto.packet.Response response = 8;
         */
        response: Response;
    } | {
        oneofKind: "event";
        /**
         * @generated from protobuf field: proto.packet.Event event = 9;
         */
        event: Event;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class Command$Type extends MessageType<Command> {
    constructor() {
        super("proto.packet.Command", [
            { no: 1, name: "heartbeat", kind: "scalar", oneof: "type", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "return_to_menu", kind: "scalar", oneof: "type", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "delay_test_finish", kind: "scalar", oneof: "type", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "stream_sync_show_image", kind: "scalar", oneof: "type", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "load_song", kind: "message", oneof: "type", T: () => Command_LoadSong },
            { no: 6, name: "play_song", kind: "message", oneof: "type", T: () => Command_PlaySong },
            { no: 7, name: "send_bot_message", kind: "message", oneof: "type", T: () => Command_SendBotMessage },
            { no: 8, name: "show_modal", kind: "message", oneof: "type", T: () => Command_ShowModal },
            { no: 9, name: "discord_authorize", kind: "scalar", oneof: "type", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Command>): Command {
        const message = { type: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Command>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Command): Command {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool heartbeat */ 1:
                    message.type = {
                        oneofKind: "heartbeat",
                        heartbeat: reader.bool()
                    };
                    break;
                case /* bool return_to_menu */ 2:
                    message.type = {
                        oneofKind: "returnToMenu",
                        returnToMenu: reader.bool()
                    };
                    break;
                case /* bool delay_test_finish */ 3:
                    message.type = {
                        oneofKind: "delayTestFinish",
                        delayTestFinish: reader.bool()
                    };
                    break;
                case /* bool stream_sync_show_image */ 4:
                    message.type = {
                        oneofKind: "streamSyncShowImage",
                        streamSyncShowImage: reader.bool()
                    };
                    break;
                case /* proto.packet.Command.LoadSong load_song */ 5:
                    message.type = {
                        oneofKind: "loadSong",
                        loadSong: Command_LoadSong.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).loadSong)
                    };
                    break;
                case /* proto.packet.Command.PlaySong play_song */ 6:
                    message.type = {
                        oneofKind: "playSong",
                        playSong: Command_PlaySong.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).playSong)
                    };
                    break;
                case /* proto.packet.Command.SendBotMessage send_bot_message */ 7:
                    message.type = {
                        oneofKind: "sendBotMessage",
                        sendBotMessage: Command_SendBotMessage.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).sendBotMessage)
                    };
                    break;
                case /* proto.packet.Command.ShowModal show_modal */ 8:
                    message.type = {
                        oneofKind: "showModal",
                        showModal: Command_ShowModal.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).showModal)
                    };
                    break;
                case /* string discord_authorize */ 9:
                    message.type = {
                        oneofKind: "discordAuthorize",
                        discordAuthorize: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Command, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool heartbeat = 1; */
        if (message.type.oneofKind === "heartbeat")
            writer.tag(1, WireType.Varint).bool(message.type.heartbeat);
        /* bool return_to_menu = 2; */
        if (message.type.oneofKind === "returnToMenu")
            writer.tag(2, WireType.Varint).bool(message.type.returnToMenu);
        /* bool delay_test_finish = 3; */
        if (message.type.oneofKind === "delayTestFinish")
            writer.tag(3, WireType.Varint).bool(message.type.delayTestFinish);
        /* bool stream_sync_show_image = 4; */
        if (message.type.oneofKind === "streamSyncShowImage")
            writer.tag(4, WireType.Varint).bool(message.type.streamSyncShowImage);
        /* proto.packet.Command.LoadSong load_song = 5; */
        if (message.type.oneofKind === "loadSong")
            Command_LoadSong.internalBinaryWrite(message.type.loadSong, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* proto.packet.Command.PlaySong play_song = 6; */
        if (message.type.oneofKind === "playSong")
            Command_PlaySong.internalBinaryWrite(message.type.playSong, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* proto.packet.Command.SendBotMessage send_bot_message = 7; */
        if (message.type.oneofKind === "sendBotMessage")
            Command_SendBotMessage.internalBinaryWrite(message.type.sendBotMessage, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* proto.packet.Command.ShowModal show_modal = 8; */
        if (message.type.oneofKind === "showModal")
            Command_ShowModal.internalBinaryWrite(message.type.showModal, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* string discord_authorize = 9; */
        if (message.type.oneofKind === "discordAuthorize")
            writer.tag(9, WireType.LengthDelimited).string(message.type.discordAuthorize);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packet.Command
 */
export const Command = new Command$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Command_LoadSong$Type extends MessageType<Command_LoadSong> {
    constructor() {
        super("proto.packet.Command.LoadSong", [
            { no: 1, name: "level_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "custom_host_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Command_LoadSong>): Command_LoadSong {
        const message = { levelId: "", customHostUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Command_LoadSong>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Command_LoadSong): Command_LoadSong {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string level_id */ 1:
                    message.levelId = reader.string();
                    break;
                case /* string custom_host_url */ 2:
                    message.customHostUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Command_LoadSong, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string level_id = 1; */
        if (message.levelId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.levelId);
        /* string custom_host_url = 2; */
        if (message.customHostUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.customHostUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packet.Command.LoadSong
 */
export const Command_LoadSong = new Command_LoadSong$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Command_PlaySong$Type extends MessageType<Command_PlaySong> {
    constructor() {
        super("proto.packet.Command.PlaySong", [
            { no: 1, name: "gameplay_parameters", kind: "message", T: () => GameplayParameters },
            { no: 3, name: "floating_scoreboard", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "stream_sync", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "disable_fail", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "disable_pause", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "disable_scoresaber_submission", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "show_normal_notes_on_stream", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Command_PlaySong>): Command_PlaySong {
        const message = { floatingScoreboard: false, streamSync: false, disableFail: false, disablePause: false, disableScoresaberSubmission: false, showNormalNotesOnStream: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Command_PlaySong>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Command_PlaySong): Command_PlaySong {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.models.GameplayParameters gameplay_parameters */ 1:
                    message.gameplayParameters = GameplayParameters.internalBinaryRead(reader, reader.uint32(), options, message.gameplayParameters);
                    break;
                case /* bool floating_scoreboard */ 3:
                    message.floatingScoreboard = reader.bool();
                    break;
                case /* bool stream_sync */ 4:
                    message.streamSync = reader.bool();
                    break;
                case /* bool disable_fail */ 5:
                    message.disableFail = reader.bool();
                    break;
                case /* bool disable_pause */ 6:
                    message.disablePause = reader.bool();
                    break;
                case /* bool disable_scoresaber_submission */ 7:
                    message.disableScoresaberSubmission = reader.bool();
                    break;
                case /* bool show_normal_notes_on_stream */ 8:
                    message.showNormalNotesOnStream = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Command_PlaySong, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.models.GameplayParameters gameplay_parameters = 1; */
        if (message.gameplayParameters)
            GameplayParameters.internalBinaryWrite(message.gameplayParameters, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool floating_scoreboard = 3; */
        if (message.floatingScoreboard !== false)
            writer.tag(3, WireType.Varint).bool(message.floatingScoreboard);
        /* bool stream_sync = 4; */
        if (message.streamSync !== false)
            writer.tag(4, WireType.Varint).bool(message.streamSync);
        /* bool disable_fail = 5; */
        if (message.disableFail !== false)
            writer.tag(5, WireType.Varint).bool(message.disableFail);
        /* bool disable_pause = 6; */
        if (message.disablePause !== false)
            writer.tag(6, WireType.Varint).bool(message.disablePause);
        /* bool disable_scoresaber_submission = 7; */
        if (message.disableScoresaberSubmission !== false)
            writer.tag(7, WireType.Varint).bool(message.disableScoresaberSubmission);
        /* bool show_normal_notes_on_stream = 8; */
        if (message.showNormalNotesOnStream !== false)
            writer.tag(8, WireType.Varint).bool(message.showNormalNotesOnStream);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packet.Command.PlaySong
 */
export const Command_PlaySong = new Command_PlaySong$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Command_SendBotMessage$Type extends MessageType<Command_SendBotMessage> {
    constructor() {
        super("proto.packet.Command.SendBotMessage", [
            { no: 1, name: "channel", kind: "message", T: () => Channel },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Command_SendBotMessage>): Command_SendBotMessage {
        const message = { message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Command_SendBotMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Command_SendBotMessage): Command_SendBotMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.discord.Channel channel */ 1:
                    message.channel = Channel.internalBinaryRead(reader, reader.uint32(), options, message.channel);
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Command_SendBotMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.discord.Channel channel = 1; */
        if (message.channel)
            Channel.internalBinaryWrite(message.channel, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packet.Command.SendBotMessage
 */
export const Command_SendBotMessage = new Command_SendBotMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Command_ShowModal$Type extends MessageType<Command_ShowModal> {
    constructor() {
        super("proto.packet.Command.ShowModal", [
            { no: 1, name: "modal_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "message_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "message_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "can_close", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "option_1", kind: "message", T: () => ModalOption },
            { no: 6, name: "option_2", kind: "message", T: () => ModalOption }
        ]);
    }
    create(value?: PartialMessage<Command_ShowModal>): Command_ShowModal {
        const message = { modalId: "", messageTitle: "", messageText: "", canClose: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Command_ShowModal>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Command_ShowModal): Command_ShowModal {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string modal_id */ 1:
                    message.modalId = reader.string();
                    break;
                case /* string message_title */ 2:
                    message.messageTitle = reader.string();
                    break;
                case /* string message_text */ 3:
                    message.messageText = reader.string();
                    break;
                case /* bool can_close */ 4:
                    message.canClose = reader.bool();
                    break;
                case /* proto.models.ModalOption option_1 */ 5:
                    message.option1 = ModalOption.internalBinaryRead(reader, reader.uint32(), options, message.option1);
                    break;
                case /* proto.models.ModalOption option_2 */ 6:
                    message.option2 = ModalOption.internalBinaryRead(reader, reader.uint32(), options, message.option2);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Command_ShowModal, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string modal_id = 1; */
        if (message.modalId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.modalId);
        /* string message_title = 2; */
        if (message.messageTitle !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.messageTitle);
        /* string message_text = 3; */
        if (message.messageText !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.messageText);
        /* bool can_close = 4; */
        if (message.canClose !== false)
            writer.tag(4, WireType.Varint).bool(message.canClose);
        /* proto.models.ModalOption option_1 = 5; */
        if (message.option1)
            ModalOption.internalBinaryWrite(message.option1, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* proto.models.ModalOption option_2 = 6; */
        if (message.option2)
            ModalOption.internalBinaryWrite(message.option2, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packet.Command.ShowModal
 */
export const Command_ShowModal = new Command_ShowModal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Push$Type extends MessageType<Push> {
    constructor() {
        super("proto.packet.Push", [
            { no: 1, name: "leaderboard_score", kind: "message", oneof: "data", T: () => LeaderboardScore },
            { no: 2, name: "realtime_score", kind: "message", oneof: "data", T: () => RealtimeScore },
            { no: 3, name: "song_finished", kind: "message", oneof: "data", T: () => Push_SongFinished },
            { no: 4, name: "discord_authorized", kind: "message", oneof: "data", T: () => Push_DiscordAuthorized }
        ]);
    }
    create(value?: PartialMessage<Push>): Push {
        const message = { data: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Push>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Push): Push {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.models.LeaderboardScore leaderboard_score */ 1:
                    message.data = {
                        oneofKind: "leaderboardScore",
                        leaderboardScore: LeaderboardScore.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).leaderboardScore)
                    };
                    break;
                case /* proto.models.RealtimeScore realtime_score */ 2:
                    message.data = {
                        oneofKind: "realtimeScore",
                        realtimeScore: RealtimeScore.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).realtimeScore)
                    };
                    break;
                case /* proto.packet.Push.SongFinished song_finished */ 3:
                    message.data = {
                        oneofKind: "songFinished",
                        songFinished: Push_SongFinished.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).songFinished)
                    };
                    break;
                case /* proto.packet.Push.DiscordAuthorized discord_authorized */ 4:
                    message.data = {
                        oneofKind: "discordAuthorized",
                        discordAuthorized: Push_DiscordAuthorized.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).discordAuthorized)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Push, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.models.LeaderboardScore leaderboard_score = 1; */
        if (message.data.oneofKind === "leaderboardScore")
            LeaderboardScore.internalBinaryWrite(message.data.leaderboardScore, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* proto.models.RealtimeScore realtime_score = 2; */
        if (message.data.oneofKind === "realtimeScore")
            RealtimeScore.internalBinaryWrite(message.data.realtimeScore, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* proto.packet.Push.SongFinished song_finished = 3; */
        if (message.data.oneofKind === "songFinished")
            Push_SongFinished.internalBinaryWrite(message.data.songFinished, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* proto.packet.Push.DiscordAuthorized discord_authorized = 4; */
        if (message.data.oneofKind === "discordAuthorized")
            Push_DiscordAuthorized.internalBinaryWrite(message.data.discordAuthorized, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packet.Push
 */
export const Push = new Push$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Push_SongFinished$Type extends MessageType<Push_SongFinished> {
    constructor() {
        super("proto.packet.Push.SongFinished", [
            { no: 1, name: "player", kind: "message", T: () => User },
            { no: 2, name: "beatmap", kind: "message", T: () => Beatmap },
            { no: 3, name: "type", kind: "enum", T: () => ["proto.packet.Push.SongFinished.CompletionType", Push_SongFinished_CompletionType] },
            { no: 4, name: "score", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Push_SongFinished>): Push_SongFinished {
        const message = { type: 0, score: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Push_SongFinished>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Push_SongFinished): Push_SongFinished {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.models.User player */ 1:
                    message.player = User.internalBinaryRead(reader, reader.uint32(), options, message.player);
                    break;
                case /* proto.models.Beatmap beatmap */ 2:
                    message.beatmap = Beatmap.internalBinaryRead(reader, reader.uint32(), options, message.beatmap);
                    break;
                case /* proto.packet.Push.SongFinished.CompletionType type */ 3:
                    message.type = reader.int32();
                    break;
                case /* int32 score */ 4:
                    message.score = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Push_SongFinished, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.models.User player = 1; */
        if (message.player)
            User.internalBinaryWrite(message.player, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* proto.models.Beatmap beatmap = 2; */
        if (message.beatmap)
            Beatmap.internalBinaryWrite(message.beatmap, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* proto.packet.Push.SongFinished.CompletionType type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        /* int32 score = 4; */
        if (message.score !== 0)
            writer.tag(4, WireType.Varint).int32(message.score);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packet.Push.SongFinished
 */
export const Push_SongFinished = new Push_SongFinished$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Push_DiscordAuthorized$Type extends MessageType<Push_DiscordAuthorized> {
    constructor() {
        super("proto.packet.Push.DiscordAuthorized", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Push_DiscordAuthorized>): Push_DiscordAuthorized {
        const message = { success: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Push_DiscordAuthorized>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Push_DiscordAuthorized): Push_DiscordAuthorized {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Push_DiscordAuthorized, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packet.Push.DiscordAuthorized
 */
export const Push_DiscordAuthorized = new Push_DiscordAuthorized$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Request$Type extends MessageType<Request> {
    constructor() {
        super("proto.packet.Request", [
            { no: 1, name: "connect", kind: "message", oneof: "type", T: () => Request_Connect },
            { no: 2, name: "leaderboard_score", kind: "message", oneof: "type", T: () => Request_LeaderboardScore },
            { no: 3, name: "preload_image_for_stream_sync", kind: "message", oneof: "type", T: () => Request_PreloadImageForStreamSync }
        ]);
    }
    create(value?: PartialMessage<Request>): Request {
        const message = { type: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request): Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.packet.Request.Connect connect */ 1:
                    message.type = {
                        oneofKind: "connect",
                        connect: Request_Connect.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).connect)
                    };
                    break;
                case /* proto.packet.Request.LeaderboardScore leaderboard_score */ 2:
                    message.type = {
                        oneofKind: "leaderboardScore",
                        leaderboardScore: Request_LeaderboardScore.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).leaderboardScore)
                    };
                    break;
                case /* proto.packet.Request.PreloadImageForStreamSync preload_image_for_stream_sync */ 3:
                    message.type = {
                        oneofKind: "preloadImageForStreamSync",
                        preloadImageForStreamSync: Request_PreloadImageForStreamSync.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).preloadImageForStreamSync)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.packet.Request.Connect connect = 1; */
        if (message.type.oneofKind === "connect")
            Request_Connect.internalBinaryWrite(message.type.connect, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* proto.packet.Request.LeaderboardScore leaderboard_score = 2; */
        if (message.type.oneofKind === "leaderboardScore")
            Request_LeaderboardScore.internalBinaryWrite(message.type.leaderboardScore, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* proto.packet.Request.PreloadImageForStreamSync preload_image_for_stream_sync = 3; */
        if (message.type.oneofKind === "preloadImageForStreamSync")
            Request_PreloadImageForStreamSync.internalBinaryWrite(message.type.preloadImageForStreamSync, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packet.Request
 */
export const Request = new Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Request_Connect$Type extends MessageType<Request_Connect> {
    constructor() {
        super("proto.packet.Request.Connect", [
            { no: 1, name: "user", kind: "message", T: () => User },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "client_version", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Request_Connect>): Request_Connect {
        const message = { password: "", clientVersion: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Request_Connect>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_Connect): Request_Connect {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.models.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                case /* int32 client_version */ 3:
                    message.clientVersion = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Request_Connect, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.models.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        /* int32 client_version = 3; */
        if (message.clientVersion !== 0)
            writer.tag(3, WireType.Varint).int32(message.clientVersion);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packet.Request.Connect
 */
export const Request_Connect = new Request_Connect$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Request_LeaderboardScore$Type extends MessageType<Request_LeaderboardScore> {
    constructor() {
        super("proto.packet.Request.LeaderboardScore", [
            { no: 1, name: "event_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "parameters", kind: "message", T: () => GameplayParameters }
        ]);
    }
    create(value?: PartialMessage<Request_LeaderboardScore>): Request_LeaderboardScore {
        const message = { eventId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Request_LeaderboardScore>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_LeaderboardScore): Request_LeaderboardScore {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string event_id */ 1:
                    message.eventId = reader.string();
                    break;
                case /* proto.models.GameplayParameters parameters */ 2:
                    message.parameters = GameplayParameters.internalBinaryRead(reader, reader.uint32(), options, message.parameters);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Request_LeaderboardScore, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string event_id = 1; */
        if (message.eventId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.eventId);
        /* proto.models.GameplayParameters parameters = 2; */
        if (message.parameters)
            GameplayParameters.internalBinaryWrite(message.parameters, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packet.Request.LeaderboardScore
 */
export const Request_LeaderboardScore = new Request_LeaderboardScore$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Request_PreloadImageForStreamSync$Type extends MessageType<Request_PreloadImageForStreamSync> {
    constructor() {
        super("proto.packet.Request.PreloadImageForStreamSync", [
            { no: 1, name: "file_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "compressed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Request_PreloadImageForStreamSync>): Request_PreloadImageForStreamSync {
        const message = { fileId: "", compressed: false, data: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Request_PreloadImageForStreamSync>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_PreloadImageForStreamSync): Request_PreloadImageForStreamSync {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string file_id */ 1:
                    message.fileId = reader.string();
                    break;
                case /* bool compressed */ 2:
                    message.compressed = reader.bool();
                    break;
                case /* bytes data */ 3:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Request_PreloadImageForStreamSync, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string file_id = 1; */
        if (message.fileId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fileId);
        /* bool compressed = 2; */
        if (message.compressed !== false)
            writer.tag(2, WireType.Varint).bool(message.compressed);
        /* bytes data = 3; */
        if (message.data.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packet.Request.PreloadImageForStreamSync
 */
export const Request_PreloadImageForStreamSync = new Request_PreloadImageForStreamSync$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Response$Type extends MessageType<Response> {
    constructor() {
        super("proto.packet.Response", [
            { no: 1, name: "type", kind: "enum", T: () => ["proto.packet.Response.ResponseType", Response_ResponseType] },
            { no: 2, name: "responding_to_packet_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "connect", kind: "message", oneof: "details", T: () => Response_Connect },
            { no: 4, name: "leaderboard_scores", kind: "message", oneof: "details", T: () => Response_LeaderboardScores },
            { no: 5, name: "loaded_song", kind: "message", oneof: "details", T: () => Response_LoadedSong },
            { no: 6, name: "modal", kind: "message", oneof: "details", T: () => Response_Modal },
            { no: 7, name: "modify_qualifier", kind: "message", oneof: "details", T: () => Response_ModifyQualifier },
            { no: 8, name: "image_preloaded", kind: "message", oneof: "details", T: () => Response_ImagePreloaded }
        ]);
    }
    create(value?: PartialMessage<Response>): Response {
        const message = { type: 0, respondingToPacketId: "", details: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response): Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.packet.Response.ResponseType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* string responding_to_packet_id */ 2:
                    message.respondingToPacketId = reader.string();
                    break;
                case /* proto.packet.Response.Connect connect */ 3:
                    message.details = {
                        oneofKind: "connect",
                        connect: Response_Connect.internalBinaryRead(reader, reader.uint32(), options, (message.details as any).connect)
                    };
                    break;
                case /* proto.packet.Response.LeaderboardScores leaderboard_scores */ 4:
                    message.details = {
                        oneofKind: "leaderboardScores",
                        leaderboardScores: Response_LeaderboardScores.internalBinaryRead(reader, reader.uint32(), options, (message.details as any).leaderboardScores)
                    };
                    break;
                case /* proto.packet.Response.LoadedSong loaded_song */ 5:
                    message.details = {
                        oneofKind: "loadedSong",
                        loadedSong: Response_LoadedSong.internalBinaryRead(reader, reader.uint32(), options, (message.details as any).loadedSong)
                    };
                    break;
                case /* proto.packet.Response.Modal modal */ 6:
                    message.details = {
                        oneofKind: "modal",
                        modal: Response_Modal.internalBinaryRead(reader, reader.uint32(), options, (message.details as any).modal)
                    };
                    break;
                case /* proto.packet.Response.ModifyQualifier modify_qualifier */ 7:
                    message.details = {
                        oneofKind: "modifyQualifier",
                        modifyQualifier: Response_ModifyQualifier.internalBinaryRead(reader, reader.uint32(), options, (message.details as any).modifyQualifier)
                    };
                    break;
                case /* proto.packet.Response.ImagePreloaded image_preloaded */ 8:
                    message.details = {
                        oneofKind: "imagePreloaded",
                        imagePreloaded: Response_ImagePreloaded.internalBinaryRead(reader, reader.uint32(), options, (message.details as any).imagePreloaded)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.packet.Response.ResponseType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* string responding_to_packet_id = 2; */
        if (message.respondingToPacketId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.respondingToPacketId);
        /* proto.packet.Response.Connect connect = 3; */
        if (message.details.oneofKind === "connect")
            Response_Connect.internalBinaryWrite(message.details.connect, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* proto.packet.Response.LeaderboardScores leaderboard_scores = 4; */
        if (message.details.oneofKind === "leaderboardScores")
            Response_LeaderboardScores.internalBinaryWrite(message.details.leaderboardScores, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* proto.packet.Response.LoadedSong loaded_song = 5; */
        if (message.details.oneofKind === "loadedSong")
            Response_LoadedSong.internalBinaryWrite(message.details.loadedSong, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* proto.packet.Response.Modal modal = 6; */
        if (message.details.oneofKind === "modal")
            Response_Modal.internalBinaryWrite(message.details.modal, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* proto.packet.Response.ModifyQualifier modify_qualifier = 7; */
        if (message.details.oneofKind === "modifyQualifier")
            Response_ModifyQualifier.internalBinaryWrite(message.details.modifyQualifier, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* proto.packet.Response.ImagePreloaded image_preloaded = 8; */
        if (message.details.oneofKind === "imagePreloaded")
            Response_ImagePreloaded.internalBinaryWrite(message.details.imagePreloaded, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packet.Response
 */
export const Response = new Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Response_Connect$Type extends MessageType<Response_Connect> {
    constructor() {
        super("proto.packet.Response.Connect", [
            { no: 1, name: "state", kind: "message", T: () => State },
            { no: 2, name: "self_guid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "server_version", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "reason", kind: "enum", T: () => ["proto.packet.Response.ConnectFailReason", Response_ConnectFailReason] }
        ]);
    }
    create(value?: PartialMessage<Response_Connect>): Response_Connect {
        const message = { selfGuid: "", serverVersion: 0, message: "", reason: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Response_Connect>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response_Connect): Response_Connect {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.models.State state */ 1:
                    message.state = State.internalBinaryRead(reader, reader.uint32(), options, message.state);
                    break;
                case /* string self_guid */ 2:
                    message.selfGuid = reader.string();
                    break;
                case /* int32 server_version */ 3:
                    message.serverVersion = reader.int32();
                    break;
                case /* string message */ 4:
                    message.message = reader.string();
                    break;
                case /* proto.packet.Response.ConnectFailReason reason */ 5:
                    message.reason = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Response_Connect, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.models.State state = 1; */
        if (message.state)
            State.internalBinaryWrite(message.state, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string self_guid = 2; */
        if (message.selfGuid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.selfGuid);
        /* int32 server_version = 3; */
        if (message.serverVersion !== 0)
            writer.tag(3, WireType.Varint).int32(message.serverVersion);
        /* string message = 4; */
        if (message.message !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.message);
        /* proto.packet.Response.ConnectFailReason reason = 5; */
        if (message.reason !== 0)
            writer.tag(5, WireType.Varint).int32(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packet.Response.Connect
 */
export const Response_Connect = new Response_Connect$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Response_LeaderboardScores$Type extends MessageType<Response_LeaderboardScores> {
    constructor() {
        super("proto.packet.Response.LeaderboardScores", [
            { no: 1, name: "scores", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LeaderboardScore }
        ]);
    }
    create(value?: PartialMessage<Response_LeaderboardScores>): Response_LeaderboardScores {
        const message = { scores: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Response_LeaderboardScores>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response_LeaderboardScores): Response_LeaderboardScores {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated proto.models.LeaderboardScore scores */ 1:
                    message.scores.push(LeaderboardScore.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Response_LeaderboardScores, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated proto.models.LeaderboardScore scores = 1; */
        for (let i = 0; i < message.scores.length; i++)
            LeaderboardScore.internalBinaryWrite(message.scores[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packet.Response.LeaderboardScores
 */
export const Response_LeaderboardScores = new Response_LeaderboardScores$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Response_LoadedSong$Type extends MessageType<Response_LoadedSong> {
    constructor() {
        super("proto.packet.Response.LoadedSong", [
            { no: 1, name: "level", kind: "message", T: () => PreviewBeatmapLevel }
        ]);
    }
    create(value?: PartialMessage<Response_LoadedSong>): Response_LoadedSong {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Response_LoadedSong>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response_LoadedSong): Response_LoadedSong {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.models.PreviewBeatmapLevel level */ 1:
                    message.level = PreviewBeatmapLevel.internalBinaryRead(reader, reader.uint32(), options, message.level);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Response_LoadedSong, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.models.PreviewBeatmapLevel level = 1; */
        if (message.level)
            PreviewBeatmapLevel.internalBinaryWrite(message.level, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packet.Response.LoadedSong
 */
export const Response_LoadedSong = new Response_LoadedSong$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Response_Modal$Type extends MessageType<Response_Modal> {
    constructor() {
        super("proto.packet.Response.Modal", [
            { no: 1, name: "modal_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Response_Modal>): Response_Modal {
        const message = { modalId: "", value: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Response_Modal>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response_Modal): Response_Modal {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string modal_id */ 1:
                    message.modalId = reader.string();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Response_Modal, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string modal_id = 1; */
        if (message.modalId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.modalId);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packet.Response.Modal
 */
export const Response_Modal = new Response_Modal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Response_ModifyQualifier$Type extends MessageType<Response_ModifyQualifier> {
    constructor() {
        super("proto.packet.Response.ModifyQualifier", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Response_ModifyQualifier>): Response_ModifyQualifier {
        const message = { message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Response_ModifyQualifier>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response_ModifyQualifier): Response_ModifyQualifier {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Response_ModifyQualifier, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packet.Response.ModifyQualifier
 */
export const Response_ModifyQualifier = new Response_ModifyQualifier$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Response_ImagePreloaded$Type extends MessageType<Response_ImagePreloaded> {
    constructor() {
        super("proto.packet.Response.ImagePreloaded", [
            { no: 1, name: "file_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Response_ImagePreloaded>): Response_ImagePreloaded {
        const message = { fileId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Response_ImagePreloaded>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response_ImagePreloaded): Response_ImagePreloaded {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string file_id */ 1:
                    message.fileId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Response_ImagePreloaded, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string file_id = 1; */
        if (message.fileId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fileId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packet.Response.ImagePreloaded
 */
export const Response_ImagePreloaded = new Response_ImagePreloaded$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Acknowledgement$Type extends MessageType<Acknowledgement> {
    constructor() {
        super("proto.packet.Acknowledgement", [
            { no: 1, name: "packet_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["proto.packet.Acknowledgement.AcknowledgementType", Acknowledgement_AcknowledgementType] }
        ]);
    }
    create(value?: PartialMessage<Acknowledgement>): Acknowledgement {
        const message = { packetId: "", type: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Acknowledgement>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Acknowledgement): Acknowledgement {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string packet_id */ 1:
                    message.packetId = reader.string();
                    break;
                case /* proto.packet.Acknowledgement.AcknowledgementType type */ 2:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Acknowledgement, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string packet_id = 1; */
        if (message.packetId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.packetId);
        /* proto.packet.Acknowledgement.AcknowledgementType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packet.Acknowledgement
 */
export const Acknowledgement = new Acknowledgement$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ForwardingPacket$Type extends MessageType<ForwardingPacket> {
    constructor() {
        super("proto.packet.ForwardingPacket", [
            { no: 1, name: "forward_to", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "packet", kind: "message", T: () => Packet }
        ]);
    }
    create(value?: PartialMessage<ForwardingPacket>): ForwardingPacket {
        const message = { forwardTo: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ForwardingPacket>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ForwardingPacket): ForwardingPacket {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string forward_to */ 1:
                    message.forwardTo.push(reader.string());
                    break;
                case /* proto.packet.Packet packet */ 2:
                    message.packet = Packet.internalBinaryRead(reader, reader.uint32(), options, message.packet);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ForwardingPacket, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string forward_to = 1; */
        for (let i = 0; i < message.forwardTo.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.forwardTo[i]);
        /* proto.packet.Packet packet = 2; */
        if (message.packet)
            Packet.internalBinaryWrite(message.packet, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packet.ForwardingPacket
 */
export const ForwardingPacket = new ForwardingPacket$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event$Type extends MessageType<Event> {
    constructor() {
        super("proto.packet.Event", [
            { no: 1, name: "user_added_event", kind: "message", oneof: "changedObject", T: () => Event_UserAddedEvent },
            { no: 2, name: "user_updated_event", kind: "message", oneof: "changedObject", T: () => Event_UserUpdatedEvent },
            { no: 3, name: "user_left_event", kind: "message", oneof: "changedObject", T: () => Event_UserLeftEvent },
            { no: 6, name: "match_created_event", kind: "message", oneof: "changedObject", T: () => Event_MatchCreatedEvent },
            { no: 7, name: "match_updated_event", kind: "message", oneof: "changedObject", T: () => Event_MatchUpdatedEvent },
            { no: 8, name: "match_deleted_event", kind: "message", oneof: "changedObject", T: () => Event_MatchDeletedEvent },
            { no: 9, name: "qualifier_created_event", kind: "message", oneof: "changedObject", T: () => Event_QualifierCreatedEvent },
            { no: 10, name: "qualifier_updated_event", kind: "message", oneof: "changedObject", T: () => Event_QualifierUpdatedEvent },
            { no: 11, name: "qualifier_deleted_event", kind: "message", oneof: "changedObject", T: () => Event_QualifierDeletedEvent },
            { no: 12, name: "server_added_event", kind: "message", oneof: "changedObject", T: () => Event_ServerAddedEvent },
            { no: 13, name: "server_deleted_event", kind: "message", oneof: "changedObject", T: () => Event_ServerDeletedEvent }
        ]);
    }
    create(value?: PartialMessage<Event>): Event {
        const message = { changedObject: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Event>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event): Event {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.packet.Event.UserAddedEvent user_added_event */ 1:
                    message.changedObject = {
                        oneofKind: "userAddedEvent",
                        userAddedEvent: Event_UserAddedEvent.internalBinaryRead(reader, reader.uint32(), options, (message.changedObject as any).userAddedEvent)
                    };
                    break;
                case /* proto.packet.Event.UserUpdatedEvent user_updated_event */ 2:
                    message.changedObject = {
                        oneofKind: "userUpdatedEvent",
                        userUpdatedEvent: Event_UserUpdatedEvent.internalBinaryRead(reader, reader.uint32(), options, (message.changedObject as any).userUpdatedEvent)
                    };
                    break;
                case /* proto.packet.Event.UserLeftEvent user_left_event */ 3:
                    message.changedObject = {
                        oneofKind: "userLeftEvent",
                        userLeftEvent: Event_UserLeftEvent.internalBinaryRead(reader, reader.uint32(), options, (message.changedObject as any).userLeftEvent)
                    };
                    break;
                case /* proto.packet.Event.MatchCreatedEvent match_created_event */ 6:
                    message.changedObject = {
                        oneofKind: "matchCreatedEvent",
                        matchCreatedEvent: Event_MatchCreatedEvent.internalBinaryRead(reader, reader.uint32(), options, (message.changedObject as any).matchCreatedEvent)
                    };
                    break;
                case /* proto.packet.Event.MatchUpdatedEvent match_updated_event */ 7:
                    message.changedObject = {
                        oneofKind: "matchUpdatedEvent",
                        matchUpdatedEvent: Event_MatchUpdatedEvent.internalBinaryRead(reader, reader.uint32(), options, (message.changedObject as any).matchUpdatedEvent)
                    };
                    break;
                case /* proto.packet.Event.MatchDeletedEvent match_deleted_event */ 8:
                    message.changedObject = {
                        oneofKind: "matchDeletedEvent",
                        matchDeletedEvent: Event_MatchDeletedEvent.internalBinaryRead(reader, reader.uint32(), options, (message.changedObject as any).matchDeletedEvent)
                    };
                    break;
                case /* proto.packet.Event.QualifierCreatedEvent qualifier_created_event */ 9:
                    message.changedObject = {
                        oneofKind: "qualifierCreatedEvent",
                        qualifierCreatedEvent: Event_QualifierCreatedEvent.internalBinaryRead(reader, reader.uint32(), options, (message.changedObject as any).qualifierCreatedEvent)
                    };
                    break;
                case /* proto.packet.Event.QualifierUpdatedEvent qualifier_updated_event */ 10:
                    message.changedObject = {
                        oneofKind: "qualifierUpdatedEvent",
                        qualifierUpdatedEvent: Event_QualifierUpdatedEvent.internalBinaryRead(reader, reader.uint32(), options, (message.changedObject as any).qualifierUpdatedEvent)
                    };
                    break;
                case /* proto.packet.Event.QualifierDeletedEvent qualifier_deleted_event */ 11:
                    message.changedObject = {
                        oneofKind: "qualifierDeletedEvent",
                        qualifierDeletedEvent: Event_QualifierDeletedEvent.internalBinaryRead(reader, reader.uint32(), options, (message.changedObject as any).qualifierDeletedEvent)
                    };
                    break;
                case /* proto.packet.Event.ServerAddedEvent server_added_event */ 12:
                    message.changedObject = {
                        oneofKind: "serverAddedEvent",
                        serverAddedEvent: Event_ServerAddedEvent.internalBinaryRead(reader, reader.uint32(), options, (message.changedObject as any).serverAddedEvent)
                    };
                    break;
                case /* proto.packet.Event.ServerDeletedEvent server_deleted_event */ 13:
                    message.changedObject = {
                        oneofKind: "serverDeletedEvent",
                        serverDeletedEvent: Event_ServerDeletedEvent.internalBinaryRead(reader, reader.uint32(), options, (message.changedObject as any).serverDeletedEvent)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.packet.Event.UserAddedEvent user_added_event = 1; */
        if (message.changedObject.oneofKind === "userAddedEvent")
            Event_UserAddedEvent.internalBinaryWrite(message.changedObject.userAddedEvent, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* proto.packet.Event.UserUpdatedEvent user_updated_event = 2; */
        if (message.changedObject.oneofKind === "userUpdatedEvent")
            Event_UserUpdatedEvent.internalBinaryWrite(message.changedObject.userUpdatedEvent, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* proto.packet.Event.UserLeftEvent user_left_event = 3; */
        if (message.changedObject.oneofKind === "userLeftEvent")
            Event_UserLeftEvent.internalBinaryWrite(message.changedObject.userLeftEvent, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* proto.packet.Event.MatchCreatedEvent match_created_event = 6; */
        if (message.changedObject.oneofKind === "matchCreatedEvent")
            Event_MatchCreatedEvent.internalBinaryWrite(message.changedObject.matchCreatedEvent, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* proto.packet.Event.MatchUpdatedEvent match_updated_event = 7; */
        if (message.changedObject.oneofKind === "matchUpdatedEvent")
            Event_MatchUpdatedEvent.internalBinaryWrite(message.changedObject.matchUpdatedEvent, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* proto.packet.Event.MatchDeletedEvent match_deleted_event = 8; */
        if (message.changedObject.oneofKind === "matchDeletedEvent")
            Event_MatchDeletedEvent.internalBinaryWrite(message.changedObject.matchDeletedEvent, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* proto.packet.Event.QualifierCreatedEvent qualifier_created_event = 9; */
        if (message.changedObject.oneofKind === "qualifierCreatedEvent")
            Event_QualifierCreatedEvent.internalBinaryWrite(message.changedObject.qualifierCreatedEvent, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* proto.packet.Event.QualifierUpdatedEvent qualifier_updated_event = 10; */
        if (message.changedObject.oneofKind === "qualifierUpdatedEvent")
            Event_QualifierUpdatedEvent.internalBinaryWrite(message.changedObject.qualifierUpdatedEvent, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* proto.packet.Event.QualifierDeletedEvent qualifier_deleted_event = 11; */
        if (message.changedObject.oneofKind === "qualifierDeletedEvent")
            Event_QualifierDeletedEvent.internalBinaryWrite(message.changedObject.qualifierDeletedEvent, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* proto.packet.Event.ServerAddedEvent server_added_event = 12; */
        if (message.changedObject.oneofKind === "serverAddedEvent")
            Event_ServerAddedEvent.internalBinaryWrite(message.changedObject.serverAddedEvent, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* proto.packet.Event.ServerDeletedEvent server_deleted_event = 13; */
        if (message.changedObject.oneofKind === "serverDeletedEvent")
            Event_ServerDeletedEvent.internalBinaryWrite(message.changedObject.serverDeletedEvent, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packet.Event
 */
export const Event = new Event$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event_UserAddedEvent$Type extends MessageType<Event_UserAddedEvent> {
    constructor() {
        super("proto.packet.Event.UserAddedEvent", [
            { no: 1, name: "user", kind: "message", T: () => User }
        ]);
    }
    create(value?: PartialMessage<Event_UserAddedEvent>): Event_UserAddedEvent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Event_UserAddedEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_UserAddedEvent): Event_UserAddedEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.models.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event_UserAddedEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.models.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packet.Event.UserAddedEvent
 */
export const Event_UserAddedEvent = new Event_UserAddedEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event_UserUpdatedEvent$Type extends MessageType<Event_UserUpdatedEvent> {
    constructor() {
        super("proto.packet.Event.UserUpdatedEvent", [
            { no: 1, name: "user", kind: "message", T: () => User }
        ]);
    }
    create(value?: PartialMessage<Event_UserUpdatedEvent>): Event_UserUpdatedEvent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Event_UserUpdatedEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_UserUpdatedEvent): Event_UserUpdatedEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.models.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event_UserUpdatedEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.models.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packet.Event.UserUpdatedEvent
 */
export const Event_UserUpdatedEvent = new Event_UserUpdatedEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event_UserLeftEvent$Type extends MessageType<Event_UserLeftEvent> {
    constructor() {
        super("proto.packet.Event.UserLeftEvent", [
            { no: 1, name: "user", kind: "message", T: () => User }
        ]);
    }
    create(value?: PartialMessage<Event_UserLeftEvent>): Event_UserLeftEvent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Event_UserLeftEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_UserLeftEvent): Event_UserLeftEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.models.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event_UserLeftEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.models.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packet.Event.UserLeftEvent
 */
export const Event_UserLeftEvent = new Event_UserLeftEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event_MatchCreatedEvent$Type extends MessageType<Event_MatchCreatedEvent> {
    constructor() {
        super("proto.packet.Event.MatchCreatedEvent", [
            { no: 1, name: "match", kind: "message", T: () => Match }
        ]);
    }
    create(value?: PartialMessage<Event_MatchCreatedEvent>): Event_MatchCreatedEvent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Event_MatchCreatedEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_MatchCreatedEvent): Event_MatchCreatedEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.models.Match match */ 1:
                    message.match = Match.internalBinaryRead(reader, reader.uint32(), options, message.match);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event_MatchCreatedEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.models.Match match = 1; */
        if (message.match)
            Match.internalBinaryWrite(message.match, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packet.Event.MatchCreatedEvent
 */
export const Event_MatchCreatedEvent = new Event_MatchCreatedEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event_MatchUpdatedEvent$Type extends MessageType<Event_MatchUpdatedEvent> {
    constructor() {
        super("proto.packet.Event.MatchUpdatedEvent", [
            { no: 1, name: "match", kind: "message", T: () => Match }
        ]);
    }
    create(value?: PartialMessage<Event_MatchUpdatedEvent>): Event_MatchUpdatedEvent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Event_MatchUpdatedEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_MatchUpdatedEvent): Event_MatchUpdatedEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.models.Match match */ 1:
                    message.match = Match.internalBinaryRead(reader, reader.uint32(), options, message.match);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event_MatchUpdatedEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.models.Match match = 1; */
        if (message.match)
            Match.internalBinaryWrite(message.match, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packet.Event.MatchUpdatedEvent
 */
export const Event_MatchUpdatedEvent = new Event_MatchUpdatedEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event_MatchDeletedEvent$Type extends MessageType<Event_MatchDeletedEvent> {
    constructor() {
        super("proto.packet.Event.MatchDeletedEvent", [
            { no: 1, name: "match", kind: "message", T: () => Match }
        ]);
    }
    create(value?: PartialMessage<Event_MatchDeletedEvent>): Event_MatchDeletedEvent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Event_MatchDeletedEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_MatchDeletedEvent): Event_MatchDeletedEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.models.Match match */ 1:
                    message.match = Match.internalBinaryRead(reader, reader.uint32(), options, message.match);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event_MatchDeletedEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.models.Match match = 1; */
        if (message.match)
            Match.internalBinaryWrite(message.match, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packet.Event.MatchDeletedEvent
 */
export const Event_MatchDeletedEvent = new Event_MatchDeletedEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event_QualifierCreatedEvent$Type extends MessageType<Event_QualifierCreatedEvent> {
    constructor() {
        super("proto.packet.Event.QualifierCreatedEvent", [
            { no: 1, name: "event", kind: "message", T: () => QualifierEvent }
        ]);
    }
    create(value?: PartialMessage<Event_QualifierCreatedEvent>): Event_QualifierCreatedEvent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Event_QualifierCreatedEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_QualifierCreatedEvent): Event_QualifierCreatedEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.models.QualifierEvent event */ 1:
                    message.event = QualifierEvent.internalBinaryRead(reader, reader.uint32(), options, message.event);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event_QualifierCreatedEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.models.QualifierEvent event = 1; */
        if (message.event)
            QualifierEvent.internalBinaryWrite(message.event, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packet.Event.QualifierCreatedEvent
 */
export const Event_QualifierCreatedEvent = new Event_QualifierCreatedEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event_QualifierUpdatedEvent$Type extends MessageType<Event_QualifierUpdatedEvent> {
    constructor() {
        super("proto.packet.Event.QualifierUpdatedEvent", [
            { no: 1, name: "event", kind: "message", T: () => QualifierEvent }
        ]);
    }
    create(value?: PartialMessage<Event_QualifierUpdatedEvent>): Event_QualifierUpdatedEvent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Event_QualifierUpdatedEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_QualifierUpdatedEvent): Event_QualifierUpdatedEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.models.QualifierEvent event */ 1:
                    message.event = QualifierEvent.internalBinaryRead(reader, reader.uint32(), options, message.event);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event_QualifierUpdatedEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.models.QualifierEvent event = 1; */
        if (message.event)
            QualifierEvent.internalBinaryWrite(message.event, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packet.Event.QualifierUpdatedEvent
 */
export const Event_QualifierUpdatedEvent = new Event_QualifierUpdatedEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event_QualifierDeletedEvent$Type extends MessageType<Event_QualifierDeletedEvent> {
    constructor() {
        super("proto.packet.Event.QualifierDeletedEvent", [
            { no: 1, name: "event", kind: "message", T: () => QualifierEvent }
        ]);
    }
    create(value?: PartialMessage<Event_QualifierDeletedEvent>): Event_QualifierDeletedEvent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Event_QualifierDeletedEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_QualifierDeletedEvent): Event_QualifierDeletedEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.models.QualifierEvent event */ 1:
                    message.event = QualifierEvent.internalBinaryRead(reader, reader.uint32(), options, message.event);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event_QualifierDeletedEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.models.QualifierEvent event = 1; */
        if (message.event)
            QualifierEvent.internalBinaryWrite(message.event, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packet.Event.QualifierDeletedEvent
 */
export const Event_QualifierDeletedEvent = new Event_QualifierDeletedEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event_ServerAddedEvent$Type extends MessageType<Event_ServerAddedEvent> {
    constructor() {
        super("proto.packet.Event.ServerAddedEvent", [
            { no: 1, name: "server", kind: "message", T: () => CoreServer }
        ]);
    }
    create(value?: PartialMessage<Event_ServerAddedEvent>): Event_ServerAddedEvent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Event_ServerAddedEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_ServerAddedEvent): Event_ServerAddedEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.models.CoreServer server */ 1:
                    message.server = CoreServer.internalBinaryRead(reader, reader.uint32(), options, message.server);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event_ServerAddedEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.models.CoreServer server = 1; */
        if (message.server)
            CoreServer.internalBinaryWrite(message.server, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packet.Event.ServerAddedEvent
 */
export const Event_ServerAddedEvent = new Event_ServerAddedEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event_ServerDeletedEvent$Type extends MessageType<Event_ServerDeletedEvent> {
    constructor() {
        super("proto.packet.Event.ServerDeletedEvent", [
            { no: 1, name: "server", kind: "message", T: () => CoreServer }
        ]);
    }
    create(value?: PartialMessage<Event_ServerDeletedEvent>): Event_ServerDeletedEvent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Event_ServerDeletedEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_ServerDeletedEvent): Event_ServerDeletedEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.models.CoreServer server */ 1:
                    message.server = CoreServer.internalBinaryRead(reader, reader.uint32(), options, message.server);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event_ServerDeletedEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.models.CoreServer server = 1; */
        if (message.server)
            CoreServer.internalBinaryWrite(message.server, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packet.Event.ServerDeletedEvent
 */
export const Event_ServerDeletedEvent = new Event_ServerDeletedEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Packet$Type extends MessageType<Packet> {
    constructor() {
        super("proto.packet.Packet", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "from", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "acknowledgement", kind: "message", oneof: "packet", T: () => Acknowledgement },
            { no: 4, name: "forwarding_packet", kind: "message", oneof: "packet", T: () => ForwardingPacket },
            { no: 5, name: "command", kind: "message", oneof: "packet", T: () => Command },
            { no: 6, name: "push", kind: "message", oneof: "packet", T: () => Push },
            { no: 7, name: "request", kind: "message", oneof: "packet", T: () => Request },
            { no: 8, name: "response", kind: "message", oneof: "packet", T: () => Response },
            { no: 9, name: "event", kind: "message", oneof: "packet", T: () => Event }
        ]);
    }
    create(value?: PartialMessage<Packet>): Packet {
        const message = { id: "", from: "", packet: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Packet>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Packet): Packet {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string from */ 2:
                    message.from = reader.string();
                    break;
                case /* proto.packet.Acknowledgement acknowledgement */ 3:
                    message.packet = {
                        oneofKind: "acknowledgement",
                        acknowledgement: Acknowledgement.internalBinaryRead(reader, reader.uint32(), options, (message.packet as any).acknowledgement)
                    };
                    break;
                case /* proto.packet.ForwardingPacket forwarding_packet */ 4:
                    message.packet = {
                        oneofKind: "forwardingPacket",
                        forwardingPacket: ForwardingPacket.internalBinaryRead(reader, reader.uint32(), options, (message.packet as any).forwardingPacket)
                    };
                    break;
                case /* proto.packet.Command command */ 5:
                    message.packet = {
                        oneofKind: "command",
                        command: Command.internalBinaryRead(reader, reader.uint32(), options, (message.packet as any).command)
                    };
                    break;
                case /* proto.packet.Push push */ 6:
                    message.packet = {
                        oneofKind: "push",
                        push: Push.internalBinaryRead(reader, reader.uint32(), options, (message.packet as any).push)
                    };
                    break;
                case /* proto.packet.Request request */ 7:
                    message.packet = {
                        oneofKind: "request",
                        request: Request.internalBinaryRead(reader, reader.uint32(), options, (message.packet as any).request)
                    };
                    break;
                case /* proto.packet.Response response */ 8:
                    message.packet = {
                        oneofKind: "response",
                        response: Response.internalBinaryRead(reader, reader.uint32(), options, (message.packet as any).response)
                    };
                    break;
                case /* proto.packet.Event event */ 9:
                    message.packet = {
                        oneofKind: "event",
                        event: Event.internalBinaryRead(reader, reader.uint32(), options, (message.packet as any).event)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Packet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string from = 2; */
        if (message.from !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.from);
        /* proto.packet.Acknowledgement acknowledgement = 3; */
        if (message.packet.oneofKind === "acknowledgement")
            Acknowledgement.internalBinaryWrite(message.packet.acknowledgement, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* proto.packet.ForwardingPacket forwarding_packet = 4; */
        if (message.packet.oneofKind === "forwardingPacket")
            ForwardingPacket.internalBinaryWrite(message.packet.forwardingPacket, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* proto.packet.Command command = 5; */
        if (message.packet.oneofKind === "command")
            Command.internalBinaryWrite(message.packet.command, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* proto.packet.Push push = 6; */
        if (message.packet.oneofKind === "push")
            Push.internalBinaryWrite(message.packet.push, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* proto.packet.Request request = 7; */
        if (message.packet.oneofKind === "request")
            Request.internalBinaryWrite(message.packet.request, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* proto.packet.Response response = 8; */
        if (message.packet.oneofKind === "response")
            Response.internalBinaryWrite(message.packet.response, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* proto.packet.Event event = 9; */
        if (message.packet.oneofKind === "event")
            Event.internalBinaryWrite(message.packet.event, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packet.Packet
 */
export const Packet = new Packet$Type();
